@page "/details/{ProductId:int}"
@inject IProductService _productService
@inject ICartService _cartService
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar
@using DDWeb_Client.ViewModels

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <EditForm OnValidSubmit="AddToCart" Model="DetailsVM" method="post">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="12" md="10" lg="10" xxl="10" xl="10">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">@Product.Name</MudText>
                            <MudText Typo="Typo.caption">@Product.Category.Name</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudImage Src="@Product.ImageUrl" Height="250"
                          Elevation="25" Class="rounded-lg ma-2 emptyCardImage" />
                    <MudCardContent>
                        <MudText Typo="Typo.caption">@Product.Description</MudText>
                        <br />
                        <br />
                        @foreach (var productPrice in Product.ProductPrices)
                        {
                            if (productPrice.Id == DetailsVM.SelectedProductPriceId)
                            {
                                <MudButton Variant="Variant.Outlined" Class="mr-4" Color="Color.Primary">
                                    @productPrice.Size
                                </MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Outlined" Class="mr-4"
                               @onclick="(args)=>SelectedProductPrice(args,productPrice.Id)">
                                    @productPrice.Size
                                </MudButton>
                            }
                        }
                        <br />
                        <br />
                        @if (DetailsVM.SelectedProductPriceId > 0)
                        {
                            <MudElement HtmlTag="h1">
                                Price : ₹ @SelectedPrice
                            </MudElement>
                            <br />
                            <br />
                        }

                        @if (!Product.ProductPrices.Any())
                        {
                            <MudElement HtmlTag="h2">No Size available yet...</MudElement>
                        }
                        else
                        {
                            <MudItem xs="12" sm="12" md="3" lg="3" xxl="3" xl="3">
                                <MudNumericField @bind-Value="DetailsVM.Count" Label="Quantity" Variant="Variant.Text" Min="1" Max="50" />
                            </MudItem>
                            <br />
                            <br />
                        }
                    </MudCardContent>
                    <MudCardActions>
                        @if (DetailsVM.SelectedProductPriceId > 0)
                        {
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add to Cart</MudButton>
                        }
                        else
                        {
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Disabled Color="Color.Primary">Add to Cart</MudButton>

                        }
                        <MudLink Href="/" Class="ml-auto">Back to home</MudLink>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>

}
@code {
    [Parameter]
    public int ProductId { get; set; }
    public double SelectedPrice { get; set; }
    public ProductDTO Product { get; set; } = new();
    public bool IsProcessing { get; set; } = false;
    public DetailsVM DetailsVM { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Product = await _productService.Get(ProductId);
        IsProcessing = false;
        DateTime? date = DetailsVM.EventDate;
        if (Product.ProductPrices != null)
        {
            DetailsVM.ProductPrice = Product.ProductPrices.MinBy(x => x.Price);
            DetailsVM.SelectedProductPriceId = DetailsVM.ProductPrice.Id;
            SelectedPrice = DetailsVM.ProductPrice.Price;
        }
    }

    private async Task SelectedProductPrice(MouseEventArgs e, int productPriceId)
    {
        DetailsVM.ProductPrice = Product.ProductPrices.FirstOrDefault(u => u.Id == productPriceId);
        DetailsVM.SelectedProductPriceId = productPriceId;
        SelectedPrice = DetailsVM.ProductPrice.Price;
    }

    private async Task AddToCart()
    {
        ShoppingCart shoppingCart = new()
            {
                Count = DetailsVM.Count,
                ProductId = ProductId,
                ProductPriceId = DetailsVM.SelectedProductPriceId,
                EventDate = DetailsVM.EventDate
            };

        await _cartService.IncrementCart(shoppingCart);
        _navigationManager.NavigateTo("/");
        Snackbar.Add("Product added successful", Severity.Success);
    }
}
