@page "/summary"
@inject IJSRuntime _jsRuntime
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject IPaymentService _paymentService
@inject IOrderService _orderService
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <MudGrid>
        <MudItem xs="12" sm="12" md="5" lg="5" xxl="5" xl="5">
            <EditForm Model="Order.OrderHeader" OnValidSubmit="HandleCheckout">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                              <MudText Typo="Typo.h4">Enter Details</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField Label="Name" @bind-Value="Order.OrderHeader.Name" For="@(() => Order.OrderHeader.Name)" />
                        <MudTextField Label="Phone Number" HelperText="Do not need 0 or +91"
                                  @bind-Value="Order.OrderHeader.PhoneNumber" For="@(() => Order.OrderHeader.PhoneNumber)" />
                        <MudTextField Label="Street Address" Class="mt-3"
                                  @bind-Value="Order.OrderHeader.StreetAddress" For="@(() => Order.OrderHeader.StreetAddress)" />
                        <MudTextField Label="City" Class="mt-3"
                                  @bind-Value="Order.OrderHeader.City" For="@(() => Order.OrderHeader.City)" />
                        <MudTextField Label="Postal Code" Class="mt-3"
                                  @bind-Value="Order.OrderHeader.PostalCode" For="@(() => Order.OrderHeader.PostalCode)" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Checkout Now</MudButton>
                    </MudCardActions>

                </MudCard>
            </EditForm>
        </MudItem>
        <MudItem xs="12" sm="12" md="7" lg="7" xxl="7" xl="7">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h4">Order Summary</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudTooltip Text="Go to cart">
                        <MudIconButton @onclick="(args)=> GoBack()" Icon="@Icons.Material.Filled.ShoppingCart" Color="Color.Default" />
                            </MudTooltip>
                    </CardHeaderActions>
                </MudCardHeader>
                @foreach (var prod in Order.OrderDetails)
                {
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="4" sm="4" md="3" lg="3" xxl="3" xl="3">
                                <MudImage Src="@prod.Product.ImageUrl" Alt="@prod.ProductName" Elevation="25" Class="cartImageHeight rounded-lg" />
                            </MudItem>
                            <MudItem xs="8" sm="8" md="6" lg="6" xxl="6" xl="6">
                                <MudText Typo="Typo.h5"><b>@prod.ProductName</b></MudText>
                                <MudText Typo="Typo.h6">Size : @prod.Size</MudText>
                                <MudText Typo="Typo.h6">Count : @prod.Count</MudText>
                                <MudElement HtmlTag="h2">
                                    ₹ <code style="color:black;"> @((prod.Count * prod.Price))</code>
                                </MudElement>
                            </MudItem>
                        </MudGrid>
                        <MudDivider />
                    </MudCardContent>
                }
                <MudCardActions>
                    <MudAlert>
                        <MudText Typo="Typo.h5" style="width:200px" Class="ml-auto">
                           Item Total <span style="float:right" >(₹) @Order.OrderHeader.ItemTotal</span> 
                        </MudText>
                         <MudText Typo="Typo.h5" Class="ml-auto">
                           Shipping <span style="float:right">(₹) @Order.OrderHeader.ShippingCharge</span>
                        </MudText>
                        <MudDivider />
                        <MudText Typo="Typo.h5" Class="ml-auto">
                            Total<span style="float:right" >(₹) @Order.OrderHeader.OrderTotal</span>
                        </MudText>
                    </MudAlert>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}
@code {
    public bool IsProcessing { get; set; } = false;
    private OrderDTO Order { get; set; } = null;
    private IEnumerable<ProductDTO> Products { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
        Products = await _productService.GetAll();
        Order = new()
            {
                OrderHeader = new()
                {
                    OrderTotal = 0,
                    Status = SD.Status_Pending
                },
                OrderDetails = new List<OrderDetailDTO>()
            };

        foreach (var item in cart)
        {
            ProductDTO product = Products.FirstOrDefault(u => u.Id == item.ProductId);
            ProductPriceDTO productPrice = product.ProductPrices.FirstOrDefault(u => u.Id == item.ProductPriceId);

            OrderDetailDTO orderDetailDTO = new()
                {
                    ProductId = item.ProductId,
                    Size = productPrice.Size,
                    Count = item.Count,
                    Price = productPrice.Price,
                    ProductName = product.Name,
                    Product = product,
                    EventDate = item.EventDate
                };
            Order.OrderDetails.Add(orderDetailDTO);
            Order.OrderHeader.ItemTotal += (item.Count * productPrice.Price);
        }
        Order.OrderHeader.ShippingCharge = 0;
        if(Order.OrderHeader.ItemTotal < 100)
        {
            Order.OrderHeader.ShippingCharge = 50; 
        }
        else if(Order.OrderHeader.ItemTotal < 200)
        {
            Order.OrderHeader.ShippingCharge = 30; 
        }
        Order.OrderHeader.OrderTotal = Order.OrderHeader.ItemTotal + Order.OrderHeader.ShippingCharge;

        if (await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails) != null)
        {
            var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
            Order.OrderHeader.UserId = userInfo.Id;
            Order.OrderHeader.Name = userInfo.Name;
            Order.OrderHeader.Email = userInfo.Email;
            Order.OrderHeader.PhoneNumber = userInfo.PhoneNumber;
            var userAddress = await _productService.GetDefaultAddress(userInfo.Id);
            if (userAddress != null)
            {
                Order.OrderHeader.Name = string.IsNullOrEmpty(userAddress.Name) ? Order.OrderHeader.Name : userAddress.Name;
                Order.OrderHeader.PhoneNumber = string.IsNullOrEmpty(userAddress.PhoneNumber) ? Order.OrderHeader.PhoneNumber : userAddress.PhoneNumber;
                Order.OrderHeader.StreetAddress = userAddress.StreetAddress;
                Order.OrderHeader.City = userAddress.City;
                Order.OrderHeader.State = userAddress.State;
                Order.OrderHeader.PostalCode = userAddress.PostalCode;
            }
        }

        IsProcessing = false;
    }


    private async Task HandleCheckout()
    {
        try
        {
            IsProcessing = true;
            var paymentDto = new StripePaymentDTO()
                {
                    Order = Order
                };

            //var result = await _paymentService.Checkout(paymentDto);

            //var StripeSessionAndPI = result.Data.ToString().Split(';');

            //Order.OrderHeader.SessionId= StripeSessionAndPI[0];
            //Order.OrderHeader.PaymentIntentId= StripeSessionAndPI[1];

            var orderDTOSaved = await _orderService.Create(paymentDto);

            await _localStorage.SetItemAsync(SD.Local_OrderDetails, orderDTOSaved);
            IsProcessing = false;
            _navigationManager.NavigateTo("/OrderConfirmation");
            //await _jsRuntime.InvokeVoidAsync("redirectToCheckout", StripeSessionAndPI[0]);
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/cart");
    }
    
}
