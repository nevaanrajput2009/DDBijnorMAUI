@page "/orders"
@inject IOrderService _orderService
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <MudMessageBox @ref="mbox" Title="Confirm Change Status" CancelText="Cancel">
        <MessageContent>
            @OrderChangeConfirmation
        </MessageContent>
        <YesButton>
            @if (isDeliverd)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Info">Deliverd</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error">Cancelled</MudButton>
            }
        </YesButton>
    </MudMessageBox>

    <MudGrid>
        <MudItem xs="12" sm="12" md="12" lg="12" xxl="12" xl="12">
            <MudTable Items="@CustomerOrders" Dense="true" Hover="true" Bordered="true" Striped="true"
                  Filter="new Func<OrderDTO,bool>(FilterFunc1)">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Orders</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Order Id</MudTh>
                    <MudTh>Order Date</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Item Total</MudTh>
                    <MudTh>Shipping Charge</MudTh>
                    <MudTh>Order Total</MudTh>
                    @if (IsAdmin)
                    {
                    <MudTh>Customer Name</MudTh>
                    <MudTh>Mobile Number</MudTh>
                    <MudTh>Action</MudTh>

                    }
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Order Id">
                    <MudButton @onclick="(args)=> GoToOrderDetail(context.OrderHeader.Id)" Variant="Variant.Text" Color="Color.Primary">
                        #@(context.OrderHeader.Id+1000)
                    </MudButton>
                </MudTd>
                <MudTd DataLabel="Order Date">@context.OrderHeader.OrderDate.ToString("dd/MMM/yyyy hh:mm tt")</MudTd>
                <MudTd DataLabel="Status">@context.OrderHeader.Status</MudTd>
                <MudTd DataLabel="Item Total">₹ @context.OrderHeader.ItemTotal</MudTd>
                <MudTd DataLabel="Shipping Charge">₹ @context.OrderHeader.ShippingCharge</MudTd>
                <MudTd DataLabel="Order Total">₹ @context.OrderHeader.OrderTotal</MudTd>
                @if (IsAdmin)
                    {
                    <MudTd DataLabel="Customer Name">@context.OrderHeader.Name</MudTd>
                    <MudTd DataLabel="Mobile Number">@context.OrderHeader.PhoneNumber</MudTd>
                    <MudTd DataLabel="Action">
                        <MudButton @onclick="@(async () => await OnOrderStatusChanged(@context, "Deliverd"))" Variant="Variant.Filled" Color="Color.Primary">Deliverd</MudButton>
                        <MudButton @onclick="@(async () => await OnOrderStatusChanged(@context, "Cancelled"))" Variant="Variant.Filled" Color="Color.Secondary">Cancelled</MudButton>
                    </MudTd>
                    }
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>
}

@code {
    MudMessageBox mbox { get; set; }
    string state = "Message box hasn't been opened yet";
    protected string OrderChangeConfirmation { get; set; } = "";
    protected bool isDeliverd { get; set; } = false;
    public IEnumerable<OrderDTO> CustomerOrders { get; set; } = new List<OrderDTO>();
    public bool IsProcessing { get; set; } = false;
    public bool IsAdmin { get; set; } = false;
    // public bool DisplayAlert { get; set; } = false;
    private string searchString1 = "";
    public OrderDTO CurrentOrder { get; set; } = new OrderDTO()
        {
            OrderHeader = new OrderHeaderDTO()
        };
    public string OrderStatus { get; set; } = "";

    private bool FilterFunc1(OrderDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(OrderDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.OrderHeader.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (("#" + ((element.OrderHeader.Id + 1000).ToString())).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.OrderHeader.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        var currentUser = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
        if (currentUser != null)
        {
            CustomerOrders = await _orderService.GetAll(currentUser.Id);
            IsProcessing = false;
            IsAdmin = currentUser.IsAdmin;
        }
        else
        {
            _navigationManager.NavigateTo("login");
        }
    }

    protected async Task OnOrderStatusChanged(OrderDTO order, string status)
    {
        if (status == "Deliverd")
        {
            isDeliverd = true;
        }
        OrderChangeConfirmation = $"Yor are about to {status} this order. Are you sure.";
        CurrentOrder = order;
        bool? result = await mbox.Show();
        if (result != null)
        {
            bool isOrderUpdated = await _orderService.UpdateOrderStatus(order.OrderHeader.Id, status);
            if (isOrderUpdated)
            {
                CurrentOrder.OrderHeader.Status = status;
                Snackbar.Add($"Order {status} successfully", Severity.Success);
            }
        }
        StateHasChanged();
    }

    private void GoToOrderDetail(int orderHeaderId)
    {
        _navigationManager.NavigateTo($"/orderDetails/{orderHeaderId}");
    }

}